from bottle import get, request, response

import os
import fnmatch
import json
import sys

sys.path.insert(0,'../..')

from fjp.dmccooey_parser import load_from_file
from fjp.polyhedron import Polyhedron

dmcooeyModels = []

i = 0

for root, dirnames, filenames in os.walk('../../data/dmccooey/polyhedra'):
  for filename in fnmatch.filter(filenames, '**.txt'):
    path = os.path.join(root, filename)
    name = filename[:-4]
    
    dmcooeyModels.append({
          "id": i,
          "name": name,
          "type": "dmcooey",
          "path": path
        })
    i += 1

@get('/models')
def listing_handler():
    '''Handles name listing'''

    response.headers['Content-Type'] = 'application/json'
    response.headers['Cache-Control'] = 'no-cache'
    return json.dumps({
      'models': dmcooeyModels
    })

@get('/models/<model_id:int>')
def individual_handler(model_id):
    '''Handles name listing'''

    response.headers['Content-Type'] = 'application/json'
    response.headers['Cache-Control'] = 'no-cache'

    model = "not found"

    if True: # (m["id"] == "vase"):
      data = {"vertices": [[0.3, 0.0, 0.0], [0.38221925346489866, 0.27040816326530603, -0.2776985426647092], [0.09270509831248423, 0.0, -0.2853169548885461], [-0.14599476366898015, 0.2704081632653061, -0.4493256806578124], [-0.24270509831248419, 0.0, -0.17633557568774194], [-0.4724489795918368, 0.2704081632653061, -5.785831306175761e-17], [-0.24270509831248427, 0.0, 0.1763355756877419], [-0.14599476366898034, 0.27040816326530603, 0.4493256806578123], [0.09270509831248415, 0.0, 0.2853169548885461], [0.3822192534648986, 0.2704081632653061, 0.27769854266470934], [0.1822569619884894, 0.5102040816326531, -0.5609292514475498], [-0.4771549211721628, 0.510204081632653, -0.3466733426786219], [-0.4771549211721629, 0.5102040816326531, 0.3466733426786218], [0.18225696198848923, 0.5102040816326531, 0.5609292514475498], [0.5897959183673469, 0.5102040816326531, 0.0], [0.5275121014342768, 0.7193877551020406, -0.38325997572947984], [-0.20149169327101146, 0.7193877551020407, -0.6201276672577583], [-0.6520408163265305, 0.7193877551020407, -7.98519698627713e-17], [-0.2014916932710117, 0.7193877551020406, 0.6201276672577581], [0.5275121014342767, 0.7193877551020407, 0.38325997572947995], [0.20369895751654696, 0.8979591836734693, -0.6269209280884379], [-0.5332907942512407, 0.8979591836734692, -0.3874584418172833], [-0.5332907942512408, 0.8979591836734693, 0.3874584418172832], [0.2036989575165468, 0.8979591836734693, 0.6269209280884379], [0.6591836734693877, 0.8979591836734693, 0.0], [0.49449099962305465, 1.0459183673469385, -0.35926874094203204], [-0.1888787547250953, 1.0459183673469388, -0.5813090339395889], [-0.6112244897959185, 1.0459183673469388, -7.485341149890456e-17], [-0.18887875472509552, 1.0459183673469385, 0.5813090339395888], [0.4944909996230546, 1.0459183673469388, 0.3592687409420322], [0.157031084896657, 1.163265306122449, -0.48329198481121083], [-0.41111271754971823, 1.1632653061224487, -0.2986908731037262], [-0.41111271754971834, 1.163265306122449, 0.29869087310372616], [0.15703108489665685, 1.163265306122449, 0.48329198481121083], [0.5081632653061225, 1.163265306122449, 0.0], [0.28315594803123156, 1.2499999999999998, -0.20572483830236554], [-0.1081559480312315, 1.25, -0.33286978070330375], [-0.35, 1.25, -4.286263797015736e-17], [-0.10815594803123164, 1.2499999999999998, 0.3328697807033037], [0.2831559480312315, 1.25, 0.20572483830236563]], "faces": [[2, 1, 0], [4, 3, 2], [6, 5, 4], [8, 7, 6], [0, 9, 8], [10, 1, 2], [2, 3, 10], [11, 3, 4], [4, 5, 11], [12, 5, 6], [6, 7, 12], [13, 7, 8], [8, 9, 13], [14, 9, 0], [0, 1, 14], [15, 14, 1], [1, 10, 15], [16, 10, 3], [3, 11, 16], [17, 11, 5], [5, 12, 17], [18, 12, 7], [7, 13, 18], [19, 13, 9], [9, 14, 19], [20, 15, 10], [10, 16, 20], [21, 16, 11], [11, 17, 21], [22, 17, 12], [12, 18, 22], [23, 18, 13], [13, 19, 23], [24, 19, 14], [14, 15, 24], [25, 24, 15], [15, 20, 25], [26, 20, 16], [16, 21, 26], [27, 21, 17], [17, 22, 27], [28, 22, 18], [18, 23, 28], [29, 23, 19], [19, 24, 29], [30, 25, 20], [20, 26, 30], [31, 26, 21], [21, 27, 31], [32, 27, 22], [22, 28, 32], [33, 28, 23], [23, 29, 33], [34, 29, 24], [24, 25, 34], [35, 34, 25], [25, 30, 35], [36, 30, 26], [26, 31, 36], [37, 31, 27], [27, 32, 37], [38, 32, 28], [28, 33, 38], [39, 33, 29], [29, 34, 39], [30, 36, 35], [31, 37, 36], [32, 38, 37], [33, 39, 38], [34, 35, 39], [8, 6, 4, 2, 0], [35, 36, 37, 38, 39]]}
      poly = Polyhedron(data["vertices"], data["faces"])
      model = {}
      model["data"] = {
        "vertices": [list(v) for v in poly.vertices],
        "faces": [list(f) for f in poly.faces],
        "triangles": [list(v) for v in poly.save_3d_fjp(150)]
      }
    else:
      for m in dmcooeyModels:
        if m["id"] == model_id:
          model = m
          data = load_from_file(m["path"])
          poly = Polyhedron(data["vertices"], data["faces"])
          model["data"] = {
            "vertices": [list(v) for v in poly.vertices],
            "faces": [list(f) for f in poly.faces],
            "triangles": [list(v) for v in poly.save_3d_fjp()]
          }

          break
      
    return json.dumps({
      "model": model
    })
